<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Golang on Ming's Site</title><link>https://minghsu.io/categories/golang/</link><description>Recent content in Golang on Ming's Site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 08 May 2021 15:27:23 +0800</lastBuildDate><atom:link href="https://minghsu.io/categories/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>[AWS] AWS CloudFront with Signed URL</title><link>https://minghsu.io/posts/aws-cloudfront-with-signed-url/</link><pubDate>Sat, 08 May 2021 15:27:23 +0800</pubDate><guid>https://minghsu.io/posts/aws-cloudfront-with-signed-url/</guid><description>&lt;p>Amazon CloudFront is a fast content delivery network (CDN) service managed by AWS. It serves your contents across edge locations around the globe with high transfer speeds and low latency under secured connections.&lt;/p>
&lt;p>In this post, we will set up an Amazon CloudFront distribution that serves private contents on your S3 bucket in order to speed up your content retrival while fully controlling user access permissions.&lt;/p>
&lt;p>&lt;img src="https://minghsu.io/static/images/VVroqoy.png" alt="">&lt;/p></description></item><item><title>Passing Parameters in Golang HTTP Context</title><link>https://minghsu.io/posts/http-context/</link><pubDate>Mon, 01 Mar 2021 20:44:13 +0800</pubDate><guid>https://minghsu.io/posts/http-context/</guid><description>&lt;p>When developing HTTP APIs, we may have to process the same request-specific data throughout middlewares. Since it&amp;rsquo;s a quite common pattern, I decide to figure it out and share how I solve it.&lt;/p></description></item><item><title>輕鬆「Go」建事件驅動應用</title><link>https://minghsu.io/posts/event-driven-golang-taipei-55/</link><pubDate>Thu, 25 Feb 2021 23:57:02 +0800</pubDate><guid>https://minghsu.io/posts/event-driven-golang-taipei-55/</guid><description>&lt;p>這篇文章統整了我在 &lt;a href="https://www.meetup.com/golang-taipei-meetup/events/276423744/">Golang Taipei #55 Meetup&lt;/a> 分享的內容。&lt;/p>
&lt;p>Event-driven architecture 在近幾年越來越受關注，它不僅幫助我們解耦服務組件、反轉依賴，更可提高系統的 throughput，大幅提升了擴展性。&lt;/p>
&lt;p>這次主題會講解 Event-driven 的核心概念，簡介幾種常見的分佈式消息系統，並展示如何輕鬆用 Golang 實作 event-driven application，幫助大家能更快理解。&lt;/p>
&lt;script async="" class="speakerdeck-embed" data-slide=3 data-id=3579c24fdefe4d62bc1641ea52beacfb
data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js">&lt;/script></description></item></channel></rss>